name: CI/CD Pipeline - AutoHub Clients API Java

# Gatilhos do Workflow
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    name: Build & Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'

      - name: Build and Test with Maven Wrapper
        run: ./mvnw clean package

  #      - name: Upload JAR artifact for deployment
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: application-jar
  #          path: target/autohub-clients-api-java-*.jar

  deploy-to-lambda:
    name: Deploy to AWS Lambda (Dev)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    # Opcional: Definir ambiente do GitHub para gerenciar secrets e regras de deploy
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Shaded JAR with Maven Wrapper
        # Reconstrói o JAR aqui (ou poderia baixar do artefato do job anterior)
        run: ./mvnw clean package

      - name: Configure AWS Credentials # Configura acesso à AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # --- MÉTODO RECOMENDADO: OIDC Connect ---
          # Precisa configurar o Trust Relationship no IAM Role da AWS primeiro
          # Consulte: https://github.com/aws-actions/configure-aws-credentials#configure-aws-credentials-action-for-github-actions
          #          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME }} # ARN da Role criada na AWS para o GitHub Actions
          #          aws-region: ${{ secrets.AWS_REGION }} # Ex: us-east-1 (guardado em Secrets)

          # --- MÉTODO ALTERNATIVO: Access Keys (Menos Seguro) ---
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Find Shaded JAR File # Encontra o nome exato do JAR gerado
        id: find_jar
        run: |
          # Encontra o JAR shaded (ajuste o padrão se o nome for diferente)
          JAR_FILE=$(find target -maxdepth 1 -name 'autohub-clients-api-java-*-SNAPSHOT.jar' -not -name '*-plain.jar' -not -name '*-original.jar' | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Shaded JAR file not found in target/!"
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT

      - name: Upload JAR to S3
        run: |
          aws s3 cp ${{ steps.find_jar.outputs.jar_path }} s3://${{ secrets.S3_DEPLOY_BUCKET }}/${{ secrets.S3_DEPLOY_KEY }}
        env:
          # AWS_REGION já configurado pelo step anterior
          # Usar secrets para o nome do bucket e a chave S3
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Update Lambda Function Code
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.S3_DEPLOY_BUCKET }} \
            --s3-key ${{ secrets.S3_DEPLOY_KEY }} \
            --publish # Publica uma nova versão (necessário se Lambda usa s3_object_version ou SnapStart)
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}